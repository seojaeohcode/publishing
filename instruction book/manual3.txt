백준

파일읽어오기
https://nyang-in.tistory.com/156
한 줄 읽기 / 여러 줄 읽기
>예제입력의 값에 따라서 파일리드 문장이 바뀜
const fs = require('fs'); 공통
한 줄 입력
let input = fs.readFileSync('/dev/stdin').toString().split(' ');
여러 줄 입력
let input = fs.readFileSync('/dev/stdin').toString().split('\n');
> split을 이용해서 값을 분리해 배열에 넣음.

//let input = "2 50".split(' '); 미리 값을 집어넣고 풀어야 좋다. 윈도우에서는 먹히지 않는다.

주의사항
part1.출력
1./를 할 때 정수출력을 할건지 실수출력을 할건지 생각.
--------------------------------------------------------------

자바스크립트 문법

console.log > 출력 (*자동 줄바꿈)

스코프(scope > range범위)
1.{}(brace) > 스코프(영역지정 > 컴퓨터의 성능 향상)
1-1 {}
brace로 감싸면 VARIABLES에 Block으로 뜬다.
2.Global / Local 
2-1 글로벌 / 로컬
전역변수 var여도 {}안에 있다면 local 변수로 됨. + 지역변수 let이여도  {}밖에 있다면 글로벌 변수
*컴퓨터에게 스코프를 줘야 효율적으로 일을 함.

변수(var let)
1.변수기본
let(지역변수)
var(옛날방식 전역변수) *사용하지 않기.
*지역변수 전역변수는 범위를 넘어가서 사용할 수 있냐 없냐의 문제, 글로벌+로컬과 전역+지역은 관계가 없다.
*범위를 벗어나서 사용하면 undefined나 오류로 뜬다.
2.변수와 {}
2-1.한 페이지에서는 동일한 이름의 변수를 쓰면 안 된다. > 재활용한다고 판단함.
2-2.동일한 이름을 쓰면 에러가 나나, brace로 감싸면 다시 새 변수로 만든다.
2-3.{}안에 {}를 또 넣으면 또 독립적인 블록으로 본다. 2번처럼 가능.
2-4.{}밖의 처음에 선언한 변수는 let이든 var든 공통으로 사용할 수 있다.
2-5.1번{2번{}} 2번은 1번의 변수를 쓸 수 있으나 1번은 2번을 쓸 수 없다. 
3.변수의 활용
계속 변수를 만들어 넣으면 상수와 다를 바가 없다. 쓰지 않는 변수의 값을 바꿔 재활용.
변수 이름이 너무 길어도 문제. > 3+5만 쓰지 말고, =8을 넣어서 알아보기 쉽게 만들 듯이 > 하나의 변수(result)에 결과값을 넣어서 출력. 

자료형
1.종류
string,int,boolean
2.유의사항
2-1.숫자<문자 console.log에 숫자와 문자가 같이 들어가면 그건 문자로 취급
2-1-1.모든 경우에 그런 것은 아니고, 계산이 가능하다면(+이외에 -,*.. 다른 산술자.) 사용자 편의를 위해 숫자로 변환하여 계산.
2-1-2.문자에 숫자가 들어가지 않는다면 연산불가일 때(+이외의 다른 산술자) NaN으로 처리, 그러나 +는 숫자를 문자로 처리 

boolean
1.세부 값.
true/false로 나뉨.
2.값의 종류
true:any others value(false를 제외한 아무 다른 값)
false:0, null, NaN, undefined, ''아무것도 없는 싱글쿼테이션
*조건문으로 넣어도 참 거짓이 들어감.
3.유의사항
디버깅에서는 1,0 이나 true,false 값으로 디버깅하는 게 좋다.
!result는 대입이 아니다. 값이 바뀌지 않는다.

조건문
1.연산자
|| > OR, && > AND, ! > NOT
2.조건
true면 실행 false면 넘어감.
3.문법
if > if / else if / else
동일할 때: == 값이 같냐 / === 값과 타입이 모두 같냐
4.주의사항
굳이 90점 이상이 먼저 있으면 90이상 50이하라고 쓰지 않아도 된다.
if문을 들어갔다면 다음으로 가지 않고 리턴하고 나가버린다.
그만큼 순서에 유의해야한다.

문자열
정의
1.문자의 집합
2."", ''로 값을 받음.
함수의 종류
1.charAt(인덱스)
특정 인덱스의 글자를 받아옴.
*[]필요없음.
2.replace(바꿀문자열, 바뀔문자열)
특정 부분의 문자열을 바꾼다. "t", "T" > t를 T로 바꿈. 
3.substring(인덱스1, 인덱스2)
인덱스1 ~ 인덱스2
*(인덱스2)-1번째 인덱스까지 잘라주세요 0,2 > 0~1까지 출력
유의사항
1.아무것도 없는 것과 SPACE(공백)은 다르다 공백은 하나의 문자로 인식.

루프
while
for
1.iteral 방식
*고전방식으로 쓰지 말고 let 변수 of 배열로 사용(단, 배열일 경우에만)
typeof instance
2.foreach

배열
fruits["banana"] => 이 방식도 가능. 안의 내용을 알 때만;
push pop splice split includes join concat
function은 리턴값의 갯수가 복수면 s,es 단수면 단수로

상속

산술연산
+ - * / % **

형태(type) 확인
1.typeof 변수명 으로 변수의 타입 확인 가능.

상수(static variable > const)
1.상수 기본

parseInt / number
정수형 변수로 캐스팅 / 해당하는 숫자의 형태로 형변환

문자열에 변수 넣을 때는 백틱
`${var}??!` > var+??!

호이스팅
--------------------------------------------------------------

자바스크립트 문법 이외

주석
1.ctrl+/ 단축키 자바스크립트: // html: <--!-->
*주석은 항상 달자.

변수에 이름짓는 법
1.명사와 형용사 정도로 이름을 짓는다.
2.카멜 법 vs 스네이크 법
2-1.카멜:
명사와 명사가 이어질 때 첫 글자를 제외하고, 각 명사의 첫 글자를 대문자로 쓴다.
2-2.스네이크:
명사와 명사를 연결할 때 언더바(_)를 넣음
*수업에서는 카멜 법.

vscode 
1.디버그콘솔,터미널창 밑 파란색 바 위에 >마크입력창 변수입력으로 변수의 값 체크 가능.
1-1.새로운 변수의 선언,대입 다 가능하다. > 값을 미리 볼 수 있다.
2.DEBUG CONSOLE이 있는 바의 필터 옆 선4개x 마크 > 클리어콘솔(콘솔 깨끗이)
3.자동입력 창은 Tab을 눌러야 선택 Enter는 실행.

디버깅
디버깅은 디버깅 마크가 있는 라인이 만약 false를 넣는다. 그리고 이전 라인이 true라면
디버그 마크가 있는 곳은 true이다. 다음 라인으로 넘어가야 false이다. 유의. 반응이 1번 느리다.

상수를 많이 사용하면 하드코딩이라 한다.
변수가 많은 것이 좋은 코드다.

어떻게 결과가 나올지 예상하고 만드는 즉 연상을 해보는 것이 좋다.

//toString 뒤에 trim이나 split으로 필요하면 변경

//문자열
const fs = require('fs');
const input = fs.readFileSync("/dev/stdin").toString();

//숫자
const fs = require('fs');
const input = fs.readFileSync(0,'utf8').toString();

function asink sink 동기 비동기

기호를 영어로 알아야한다.

OOP : 조상에게 자손이 무엇을 받아오는 것.